/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package UI;

import java.awt.List;
import java.io.File;
import java.util.ArrayList;
import java.util.Date;
import java.util.Scanner;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.PersonDirectory;
import model.Person;
import model.Patient;
import model.VitalSign;

/**
 *
 * @author shshyam
 */
public class PatientsViewPane extends javax.swing.JPanel {
    PersonDirectory persondirectory;

    /**
     * Creates new form CustomerDisplayResults
     */
    

    PatientsViewPane(PersonDirectory persondirectory) {
        initComponents();
        this.persondirectory=persondirectory;
        populateTable(this.persondirectory.getPersonHistory());
    }

   



    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblYearofManuf1 = new javax.swing.JLabel();
        txtRespRate = new javax.swing.JTextField();
        lblCity1 = new javax.swing.JLabel();
        txtHeartRate = new javax.swing.JTextField();
        lblYearofManuf2 = new javax.swing.JLabel();
        txtBP = new javax.swing.JTextField();
        lblCity2 = new javax.swing.JLabel();
        txtTemp = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblPatients = new javax.swing.JTable();
        lblYearofManuf3 = new javax.swing.JLabel();
        txtRespRate1 = new javax.swing.JTextField();
        lblCity3 = new javax.swing.JLabel();
        txtHeartRate1 = new javax.swing.JTextField();
        lblYearofManuf4 = new javax.swing.JLabel();
        txtBP1 = new javax.swing.JTextField();
        lblCity4 = new javax.swing.JLabel();
        txtTemp1 = new javax.swing.JTextField();
        lblCarSerNum1 = new javax.swing.JLabel();
        lblCarSerNum2 = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();
        txtPatientID = new javax.swing.JTextField();
        btnUpdatePatient = new javax.swing.JButton();
        txtHospital = new javax.swing.JTextField();
        lblCarNumPlate1 = new javax.swing.JLabel();
        lblModel1 = new javax.swing.JLabel();
        txtDoctor = new javax.swing.JTextField();
        btnAddVitals = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        btnViewPatient = new javax.swing.JButton();
        btnFindPatient = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        txtFindPatient = new javax.swing.JTextField();
        btnDelete = new javax.swing.JButton();
        btnAddSampleVitals = new javax.swing.JButton();

        lblYearofManuf1.setFont(new java.awt.Font("Optima", 0, 14)); // NOI18N
        lblYearofManuf1.setText("Respiratory Rate :");

        txtRespRate.setBackground(new java.awt.Color(204, 204, 204));

        lblCity1.setFont(new java.awt.Font("Optima", 0, 14)); // NOI18N
        lblCity1.setText("Heart Rate :");

        txtHeartRate.setBackground(new java.awt.Color(204, 204, 204));

        lblYearofManuf2.setFont(new java.awt.Font("Optima", 0, 14)); // NOI18N
        lblYearofManuf2.setText("Blood Pressure :");

        txtBP.setBackground(new java.awt.Color(204, 204, 204));

        lblCity2.setFont(new java.awt.Font("Optima", 0, 14)); // NOI18N
        lblCity2.setText("Temperature :");

        txtTemp.setBackground(new java.awt.Color(204, 204, 204));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jPanel2.setBackground(new java.awt.Color(62, 193, 211));

        jLabel1.setBackground(new java.awt.Color(255, 255, 255));
        jLabel1.setFont(new java.awt.Font("Optima", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Choose Patient from below to update Vital Signs or Patient record");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(124, 124, 124)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        tblPatients.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Name", "Age", "Patient ID", "Doctor", "Community"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblPatients);

        lblYearofManuf3.setFont(new java.awt.Font("Optima", 0, 14)); // NOI18N
        lblYearofManuf3.setForeground(new java.awt.Color(0, 102, 102));
        lblYearofManuf3.setText("Respiratory Rate :");

        txtRespRate1.setBackground(new java.awt.Color(204, 204, 204));

        lblCity3.setFont(new java.awt.Font("Optima", 0, 14)); // NOI18N
        lblCity3.setForeground(new java.awt.Color(0, 102, 102));
        lblCity3.setText("Heart Rate :");

        txtHeartRate1.setBackground(new java.awt.Color(204, 204, 204));

        lblYearofManuf4.setFont(new java.awt.Font("Optima", 0, 14)); // NOI18N
        lblYearofManuf4.setForeground(new java.awt.Color(0, 102, 102));
        lblYearofManuf4.setText("Blood Pressure :");

        txtBP1.setBackground(new java.awt.Color(204, 204, 204));

        lblCity4.setFont(new java.awt.Font("Optima", 0, 14)); // NOI18N
        lblCity4.setForeground(new java.awt.Color(0, 102, 102));
        lblCity4.setText("Temperature :");

        txtTemp1.setBackground(new java.awt.Color(204, 204, 204));

        lblCarSerNum1.setFont(new java.awt.Font("Optima", 0, 14)); // NOI18N
        lblCarSerNum1.setForeground(new java.awt.Color(0, 102, 102));
        lblCarSerNum1.setText("Name  :");

        lblCarSerNum2.setFont(new java.awt.Font("Optima", 0, 14)); // NOI18N
        lblCarSerNum2.setForeground(new java.awt.Color(0, 102, 102));
        lblCarSerNum2.setText("Patient ID  :");

        txtName.setEditable(false);
        txtName.setBackground(new java.awt.Color(204, 204, 204));

        txtPatientID.setEditable(false);
        txtPatientID.setBackground(new java.awt.Color(204, 204, 204));

        btnUpdatePatient.setBackground(new java.awt.Color(255, 255, 255));
        btnUpdatePatient.setFont(new java.awt.Font("Optima", 0, 18)); // NOI18N
        btnUpdatePatient.setForeground(new java.awt.Color(0, 178, 202));
        btnUpdatePatient.setText("Update Patient");
        btnUpdatePatient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdatePatientActionPerformed(evt);
            }
        });

        txtHospital.setBackground(new java.awt.Color(204, 204, 204));

        lblCarNumPlate1.setFont(new java.awt.Font("Optima", 0, 14)); // NOI18N
        lblCarNumPlate1.setForeground(new java.awt.Color(0, 102, 102));
        lblCarNumPlate1.setText("Preferred Hospital :");

        lblModel1.setFont(new java.awt.Font("Optima", 0, 14)); // NOI18N
        lblModel1.setForeground(new java.awt.Color(0, 102, 102));
        lblModel1.setText("Preferred Doctor :");

        txtDoctor.setBackground(new java.awt.Color(204, 204, 204));

        btnAddVitals.setBackground(new java.awt.Color(255, 255, 255));
        btnAddVitals.setFont(new java.awt.Font("Optima", 0, 18)); // NOI18N
        btnAddVitals.setForeground(new java.awt.Color(0, 178, 202));
        btnAddVitals.setText("Save Vitals");
        btnAddVitals.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddVitalsActionPerformed(evt);
            }
        });

        jPanel3.setBackground(new java.awt.Color(62, 193, 211));

        btnViewPatient.setBackground(new java.awt.Color(255, 255, 255));
        btnViewPatient.setFont(new java.awt.Font("Optima", 0, 18)); // NOI18N
        btnViewPatient.setForeground(new java.awt.Color(0, 178, 202));
        btnViewPatient.setText("View Patient");
        btnViewPatient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewPatientActionPerformed(evt);
            }
        });

        btnFindPatient.setBackground(new java.awt.Color(255, 255, 255));
        btnFindPatient.setFont(new java.awt.Font("Optima", 0, 18)); // NOI18N
        btnFindPatient.setForeground(new java.awt.Color(0, 178, 202));
        btnFindPatient.setText("Find Patient");
        btnFindPatient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFindPatientActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Optima", 0, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Find Patient by Patient ID : ");

        btnDelete.setBackground(new java.awt.Color(255, 255, 255));
        btnDelete.setFont(new java.awt.Font("Optima", 0, 18)); // NOI18N
        btnDelete.setForeground(new java.awt.Color(0, 178, 202));
        btnDelete.setText("Delete Patient");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(txtFindPatient)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnFindPatient, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnViewPatient, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(59, 59, 59)
                .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(218, 218, 218))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnViewPatient)
                    .addComponent(btnDelete))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtFindPatient, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnFindPatient))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        btnAddSampleVitals.setBackground(new java.awt.Color(255, 255, 255));
        btnAddSampleVitals.setFont(new java.awt.Font("Optima", 0, 18)); // NOI18N
        btnAddSampleVitals.setForeground(new java.awt.Color(0, 178, 202));
        btnAddSampleVitals.setText("Add Sample Vitals");
        btnAddSampleVitals.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddSampleVitalsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblYearofManuf3)
                                    .addComponent(lblCity3))
                                .addGap(102, 102, 102)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtRespRate1)
                                    .addComponent(txtHeartRate1)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(lblCarNumPlate1)
                                .addGap(91, 91, 91)
                                .addComponent(txtHospital))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblYearofManuf4)
                                    .addComponent(lblCity4))
                                .addGap(111, 111, 111)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtBP1)
                                    .addComponent(txtTemp1)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblCarSerNum1)
                                    .addComponent(lblCarSerNum2)
                                    .addComponent(lblModel1))
                                .addGap(99, 99, 99)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtName)
                                    .addComponent(txtPatientID)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(210, 210, 210)
                                .addComponent(txtDoctor))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(47, 47, 47)
                        .addComponent(btnAddVitals, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(92, 92, 92)
                        .addComponent(btnAddSampleVitals, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(92, 92, 92)
                        .addComponent(btnUpdatePatient, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(36, 36, 36)))
                .addContainerGap())
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnAddSampleVitals, btnAddVitals, btnUpdatePatient});

        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblCarSerNum1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtPatientID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblCarSerNum2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblCarNumPlate1)
                    .addComponent(txtHospital, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtDoctor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblModel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblYearofManuf3)
                    .addComponent(txtRespRate1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCity3)
                    .addComponent(txtHeartRate1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblYearofManuf4)
                    .addComponent(txtBP1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCity4)
                    .addComponent(txtTemp1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAddVitals, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAddSampleVitals)
                    .addComponent(btnUpdatePatient))
                .addGap(20, 20, 20))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {btnAddSampleVitals, btnAddVitals, btnUpdatePatient});

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnViewPatientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewPatientActionPerformed
        // TODO add your handling code here:
        
            int SelectedRowIndex = tblPatients.getSelectedRow();
        
        if(SelectedRowIndex<0)
        {
            JOptionPane.showMessageDialog(this,"Please select a row to view");
            return;
        }
        DefaultTableModel model = (DefaultTableModel) tblPatients.getModel();
        Person selectedPerson = (Person) model.getValueAt(SelectedRowIndex,0);
        
        Patient patient=selectedPerson.getPatient();
        
        txtName.setText(selectedPerson.getName());
        txtPatientID.setText(patient.getPatientID());
        txtHospital.setText(patient.getPreferredHospital());
        txtDoctor.setText(patient.getDoctorName());
        
        
        //persondirectory.bookUber(selectedUber);
        
        //JOptionPane.showMessageDialog(this,"Your cab has been booked! \n It is a "+selectedUber.getManuf()+" "+selectedUber.getModel()+" \n with Vehicle Number Plate : "+ selectedUber.getNumPlate()+" .");
    }//GEN-LAST:event_btnViewPatientActionPerformed

    private void btnFindPatientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFindPatientActionPerformed
        // TODO add your handling code here:
        
       
        
        String PatientID = txtFindPatient.getText();
        int found=0;
        clearFields();
        for(Person person : this.persondirectory.getPersonHistory())
        {
            Patient patient = person.getPatient();
           if((patient!=null) && (PatientID.trim().equals(patient.getPatientID().trim())))
        {
        txtName.setText(person.getName());
        txtPatientID.setText(patient.getPatientID());
        txtHospital.setText(patient.getPreferredHospital());
        txtDoctor.setText(patient.getDoctorName());
        found=1;
        System.out.print(patient.getPatientID()+" Search success!");
        }      
        }
        if(found==0)
           {
               JOptionPane.showMessageDialog(this,"No Patient with the given patient ID! Try again!");
                return;
           }
    }//GEN-LAST:event_btnFindPatientActionPerformed

    private void btnUpdatePatientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdatePatientActionPerformed
        // TODO add your handling code here:
        String PatientID = txtName.getText();
        int found=0;
        //clearFields();
        for(Person person : this.persondirectory.getPersonHistory())
        {
            Patient patient = person.getPatient();
           if((patient!=null) && (PatientID.trim().equals(person.getName().trim())))
        {int failsafe=0;
         if(txtHospital.getText().isEmpty())
        {
            JOptionPane.showMessageDialog(this, "Hospital name must not be Empty!");
            failsafe=1;
        }
        
        if(txtDoctor.getText().isEmpty())
        {
            JOptionPane.showMessageDialog(this, "Doctor name must not be Empty!");
            failsafe=1;
        }
        if(failsafe==0)
        {patient.setPreferredHospital(txtHospital.getText());
        patient.setDoctorName(txtDoctor.getText());}
        
        found=1;
        JOptionPane.showMessageDialog(this,person.getName()+" details updated successfully!");
        }      
        }
        if(found==0)
           {
               JOptionPane.showMessageDialog(this,"No Patient with the given patient ID! Try again!");
                return;
           }
        populateTable(this.persondirectory.getPersonHistory());
    }//GEN-LAST:event_btnUpdatePatientActionPerformed

    private void btnAddVitalsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddVitalsActionPerformed
        // TODO add your handling code here:
         int failsafe=0;
            
               if(txtHeartRate1.getText().isEmpty())
               {
                   JOptionPane.showMessageDialog(this, "HeartRate must not be Empty!");
                   failsafe=1;
               }
               
               if(txtRespRate1.getText().isEmpty())
               {
                   JOptionPane.showMessageDialog(this, "Respiration rate must not be Empty!");
                   failsafe=1;
               }

               if(txtBP1.getText().isEmpty())
               {
                   JOptionPane.showMessageDialog(this, "BP must not be Empty!");
                   failsafe=1;
               }

               if(txtTemp1.getText().isEmpty())
               {
                   JOptionPane.showMessageDialog(this, "Temperature must not be Empty!");
                   failsafe=1;
               }
               if(failsafe==0)
               {
        for(Person person : this.persondirectory.getPersonHistory())
        {
            Patient patient = person.getPatient();
           
           if((patient!=null) && (txtName.getText().trim().equals(person.getName().trim())))
           {
               VitalSign vitalSign = patient.getVitalSignHistory().createAndAddVitalSign();
               
               
        
            vitalSign.setRespiratoryRate(Integer.valueOf(txtRespRate1.getText()));
            vitalSign.setHeartRate(Integer.valueOf(txtHeartRate1.getText()));
            vitalSign.setBloodPressure(Integer.valueOf(txtBP1.getText()));
            vitalSign.setTemperature(Integer.valueOf(txtTemp1.getText()));
            /*Set current date and time as TimeStamp*/
            vitalSign.setTimestamp(new Date());
            clearFields();
            JOptionPane.showMessageDialog(this, "Vital Signs added successfully!");
        
           } }}
    }//GEN-LAST:event_btnAddVitalsActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
         int SelectedRowIndex = tblPatients.getSelectedRow();
        
        if(SelectedRowIndex<0)
        {
            JOptionPane.showMessageDialog(this,"Please select a row to view");
            return;
        }
        DefaultTableModel model = (DefaultTableModel) tblPatients.getModel();
        Person selectedPerson = (Person) model.getValueAt(SelectedRowIndex,0);
        
       selectedPerson.deletePatient();
        JOptionPane.showMessageDialog(this, "Patient record deleted!");
        populateTable(this.persondirectory.getPersonHistory());
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnAddSampleVitalsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddSampleVitalsActionPerformed
        // TODO add your handling code here:
        
         File file = new File("src/Resources/VitalsData.txt");

         try {
            Scanner sc = new Scanner(file);
          //   SimpleDateFormat formatter = new SimpleDateFormat("MM-dd-yyyy HH:mm:ss");
            while (sc.hasNextLine()) {
                String readLine = sc.nextLine();
                String[] lineArray = readLine.split(",");
               // Patient patient =  new Patient();
                //VitalSign vitals = patient.getVitalSignHistory().createAndAddVitalSign();
                
                String Name=lineArray[0].trim();
        for(Person person : this.persondirectory.getPersonHistory())
        {
            Patient patient = person.getPatient();
           
           if((patient!=null) && (Name.trim().equals(person.getName().trim())))
           {
               VitalSign vitals = patient.getVitalSignHistory().createAndAddVitalSign();
               
               
        
                vitals.setRespiratoryRate(Integer.valueOf(lineArray[1].trim()));
                vitals.setHeartRate(Integer.valueOf(lineArray[2].trim()));
                vitals.setBloodPressure(Integer.valueOf(lineArray[3].trim()));
                vitals.setTemperature(Float.valueOf(lineArray[4].trim()));
            /*Set current date and time as TimeStamp*/
            vitals.setTimestamp(new Date());
           
        
           } }

       
            
            
         }
            sc.close();
             JOptionPane.showMessageDialog(this, "Sample Data Added successfully!");
         } catch(Exception e) {
             e.printStackTrace();
         }
    }//GEN-LAST:event_btnAddSampleVitalsActionPerformed

     private void populateTable(ArrayList<Person> persondirectory) {
        
        DefaultTableModel dtm = (DefaultTableModel) tblPatients.getModel();
        dtm.setRowCount(0);
        for(Person person: persondirectory){
            Patient patient=person.getPatient();
            if(patient!=null)
            {Object[] row = new Object[5];
            row[0] = person;
            row[1]= String.valueOf(person.getAge());
            row[2]= patient.getPatientID();
            row[3]= patient.getDoctorName();
            row[4]= person.getCommunity();
            
            dtm.addRow(row);}
        }  
    }
     private void clearFields()
     {
        txtName.setText("");
        txtPatientID.setText("");
        txtHospital.setText("");
        txtDoctor.setText("");
        txtTemp1.setText("");
        txtBP1.setText("");
        txtRespRate1.setText("");
        txtHeartRate1.setText("");
        txtFindPatient.setText("");
     }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddSampleVitals;
    private javax.swing.JButton btnAddVitals;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnFindPatient;
    private javax.swing.JButton btnUpdatePatient;
    private javax.swing.JButton btnViewPatient;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblCarNumPlate1;
    private javax.swing.JLabel lblCarSerNum1;
    private javax.swing.JLabel lblCarSerNum2;
    private javax.swing.JLabel lblCity1;
    private javax.swing.JLabel lblCity2;
    private javax.swing.JLabel lblCity3;
    private javax.swing.JLabel lblCity4;
    private javax.swing.JLabel lblModel1;
    private javax.swing.JLabel lblYearofManuf1;
    private javax.swing.JLabel lblYearofManuf2;
    private javax.swing.JLabel lblYearofManuf3;
    private javax.swing.JLabel lblYearofManuf4;
    private javax.swing.JTable tblPatients;
    private javax.swing.JTextField txtBP;
    private javax.swing.JTextField txtBP1;
    private javax.swing.JTextField txtDoctor;
    private javax.swing.JTextField txtFindPatient;
    private javax.swing.JTextField txtHeartRate;
    private javax.swing.JTextField txtHeartRate1;
    private javax.swing.JTextField txtHospital;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextField txtPatientID;
    private javax.swing.JTextField txtRespRate;
    private javax.swing.JTextField txtRespRate1;
    private javax.swing.JTextField txtTemp;
    private javax.swing.JTextField txtTemp1;
    // End of variables declaration//GEN-END:variables

    /*private void populateTableFiltered(ArrayList<UberDetails> history, ArrayList<String> FilteredCabs) {
     //String[] filteredcabs;
       // List<String> list = Arrays.asList(FilteredCabs);
        //filteredcabs = new String[FilteredCabs.length];
       DefaultTableModel dtm = (DefaultTableModel) tblPatients.getModel();
        dtm.setRowCount(0);
        for(UberDetails uber: history){
            Object[] row = new Object[6];
            row[0] = uber;
            row[1]= uber.getManuf();
            row[2]= uber.getModel();
            row[3]= uber.getYearOfManuf();
            row[4]= uber.getNumSeats();
            row[5]= uber.getCity();
            if(FilteredCabs.contains(uber.getCarSerNum()) && ("Y".equals(uber.getAvail())))
         {
                dtm.addRow(row);
            } 
        }  
    }*/
}
